const abi = [{"inputs":[{"internalType":"address","name":"waddress","type":"address"},{"internalType":"address","name":"raddress","type":"address"},{"internalType":"address","name":"saddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"accuracy","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"back","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"referer","type":"address"}],"name":"back_refered","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"referer","type":"address"},{"internalType":"string","name":"code","type":"string"}],"name":"back_refered_discount","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"backed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"backers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"min_refered_discount_purchase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price_refered","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price_refered_discount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"refer","outputs":[{"internalType":"contract REFER","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"awpod","type":"uint256"}],"name":"sell","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"shop","outputs":[{"internalType":"contract SHOP","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tbacked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wpod","outputs":[{"internalType":"contract WPOD","name":"","type":"address"}],"stateMutability":"view","type":"function"}];
const bin = '6080604052640ba43b7400600455640b0f387b00600555640a7a3582006006556658d15e17628000600755633b9aca006008555f60095534801562000042575f80fd5b50604051620028a7380380620028a78339818101604052810190620000689190620002dd565b335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000dc575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000d3919062000347565b60405180910390fd5b620000ed81620001b760201b60201c565b508260015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000362565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620002a7826200027c565b9050919050565b620002b9816200029b565b8114620002c4575f80fd5b50565b5f81519050620002d781620002ae565b92915050565b5f805f60608486031215620002f757620002f662000278565b5b5f6200030686828701620002c7565b93505060206200031986828701620002c7565b92505060406200032c86828701620002c7565b9150509250925092565b62000341816200029b565b82525050565b5f6020820190506200035c5f83018462000336565b92915050565b61253780620003705f395ff3fe608060405260043610610108575f3560e01c80638dde084011610094578063c8926fe711610063578063c8926fe7146102f0578063cba4da6d1461031a578063e4849b3214610344578063e9d800201461036c578063f2fde38b146103a857610108565b80638dde084014610268578063a035b1fe14610272578063aacbf88b1461029c578063bb790e77146102c657610108565b8063715018a6116100db578063715018a6146101b857806383835c01146101ce57806384189d48146101f85780638a02170c146102145780638da5cb5b1461023e57610108565b80630881fa0d1461010c5780633bf6337c14610136578063595b7f21146101605780636b35fe451461019c575b5f80fd5b348015610117575f80fd5b506101206103d0565b60405161012d919061182d565b60405180910390f35b348015610141575f80fd5b5061014a6103f5565b604051610157919061185e565b60405180910390f35b34801561016b575f80fd5b50610186600480360381019061018191906118c3565b6103fb565b604051610193919061185e565b60405180910390f35b6101b660048036038101906101b1919061194f565b610410565b005b3480156101c3575f80fd5b506101cc6107e7565b005b3480156101d9575f80fd5b506101e26107fa565b6040516101ef919061185e565b60405180910390f35b610212600480360381019061020d91906118c3565b610800565b005b34801561021f575f80fd5b5061022861099c565b60405161023591906119cc565b60405180910390f35b348015610249575f80fd5b506102526109c1565b60405161025f91906119f4565b60405180910390f35b6102706109e8565b005b34801561027d575f80fd5b50610286610bb7565b604051610293919061185e565b60405180910390f35b3480156102a7575f80fd5b506102b0610bbd565b6040516102bd9190611a2d565b60405180910390f35b3480156102d1575f80fd5b506102da610be2565b6040516102e7919061185e565b60405180910390f35b3480156102fb575f80fd5b50610304610be8565b604051610311919061185e565b60405180910390f35b348015610325575f80fd5b5061032e610bee565b60405161033b919061185e565b60405180910390f35b34801561034f575f80fd5b5061036a60048036038101906103659190611a70565b610bf4565b005b348015610377575f80fd5b50610392600480360381019061038d9190611a70565b611372565b60405161039f91906119f4565b60405180910390f35b3480156103b3575f80fd5b506103ce60048036038101906103c991906118c3565b6113ad565b005b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b600b602052805f5260405f205f915090505481565b5f6006543461041f9190611ac8565b1461045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045690611b9e565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362a57690846040518263ffffffff1660e01b81526004016104b991906119f4565b602060405180830381865afa1580156104d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104f89190611bf1565b610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90611c8c565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe0a716d338585856040518563ffffffff1660e01b81526004016105979493929190611cf4565b602060405180830381865afa1580156105b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105d69190611bf1565b610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611da2565b60405180910390fd5b60075434101561065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065190611de3565b60405180910390fd5b6106706006543461066b9190611e2e565b611431565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634114489133856040518363ffffffff1660e01b81526004016106cc929190611e5e565b5f604051808303815f87803b1580156106e3575f80fd5b505af11580156106f5573d5f803e3d5ffd5b5050505060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ef7a389338585856040518563ffffffff1660e01b81526004016107599493929190611cf4565b5f604051808303815f87803b158015610770575f80fd5b505af1158015610782573d5f803e3d5ffd5b505050508273ffffffffffffffffffffffffffffffffffffffff166108fc60056064346107af9190611e2e565b6107b99190611e85565b90811502906040515f60405180830381858888f193505050501580156107e1573d5f803e3d5ffd5b50505050565b6107ef611664565b6107f85f6116eb565b565b60085481565b5f6005543461080f9190611ac8565b1461084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084690611f5c565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362a57690826040518263ffffffff1660e01b81526004016108a991906119f4565b602060405180830381865afa1580156108c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e89190611bf1565b610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90611c8c565b60405180910390fd5b61093d600554346109389190611e2e565b611431565b8073ffffffffffffffffffffffffffffffffffffffff166108fc60056064346109669190611e2e565b6109709190611e85565b90811502906040515f60405180830381858888f19350505050158015610998573d5f803e3d5ffd5b5050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f600454346109f79190611ac8565b14610a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2e90612010565b60405180910390fd5b610a4d60045434610a489190611e2e565b611431565b5f6005606434610a5d9190611e2e565b610a679190611e85565b90505f5b600a80549050811015610bb3575f60085483610a879190611e2e565b600854600954610a979190611e2e565b600b5f600a8681548110610aae57610aad61202e565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610b1a9190611e2e565b610b249190611e85565b9050600a8281548110610b3a57610b3961202e565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610ba4573d5f803e3d5ffd5b50508080600101915050610a6b565b5050565b60045481565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60055481565b60065481565b5f670de0b6b3a764000082600454610c0c9190611e85565b610c169190611e2e565b90508060095411610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c53906120a5565b60405180910390fd5b5f5b600a80549050811015610e01575f60085484610c7a9190611e2e565b600854600954610c8a9190611e2e565b600b5f600a8681548110610ca157610ca061202e565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610d0d9190611e2e565b610d179190611e85565b905060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600a8581548110610d6b57610d6a61202e565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610db2939291906120c3565b6020604051808303815f875af1158015610dce573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610df29190611bf1565b50508080600101915050610c5e565b505f600f606483610e129190611e2e565b610e1c9190611e85565b90505f5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d889f44f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e8a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eae919061210c565b81101561130b575f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385faec996040518163ffffffff1660e01b81526004015f60405180830381865afa158015610f1f573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610f479190612283565b8281518110610f5957610f5861202e565b5b602002602001015190505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad260b48836040518263ffffffff1660e01b8152600401610fbe91906119f4565b5f60405180830381865afa158015610fd8573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906110009190612435565b9050805f01511561122b575f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663352b7e28846040518263ffffffff1660e01b815260040161106691906119f4565b602060405180830381865afa158015611081573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110a5919061247c565b90505f600854866110b69190611e2e565b6008546009546110c69190611e2e565b600b5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461110e9190611e2e565b6111189190611e85565b600b5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461116091906124a7565b90505f60056064836111729190611e2e565b61117c9190611e85565b90505f600a60648461118e9190611e2e565b6111989190611e85565b90508373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f193505050501580156111dd573d5f803e3d5ffd5b508573ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611221573d5f803e3d5ffd5b50505050506112fc565b5f6008548561123a9190611e2e565b60085460095461124a9190611e2e565b600b5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546112929190611e2e565b61129c9190611e85565b90508273ffffffffffffffffffffffffffffffffffffffff166108fc600a6064846112c79190611e2e565b6112d19190611e85565b90811502906040515f60405180830381858888f193505050501580156112f9573d5f803e3d5ffd5b50505b50508080600101915050610e20565b505f605560648461131c9190611e2e565b6113269190611e85565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f1935050505015801561136b573d5f803e3d5ffd5b5050505050565b600a8181548110611381575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6113b5611664565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611425575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161141c91906119f4565b60405180910390fd5b61142e816116eb565b50565b5f805b600a805490508110156114c1573373ffffffffffffffffffffffffffffffffffffffff16600a828154811061146c5761146b61202e565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036114b457600191505b8080600101915050611434565b508061152857600a33908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5f605f6064346115389190611e2e565b6115429190611e85565b90508060095f82825461155591906124a7565b9250508190555080600b5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546115a891906124a7565b9250508190555060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33670de0b6b3a7640000866116019190611e85565b6040518363ffffffff1660e01b815260040161161e9291906124da565b6020604051808303815f875af115801561163a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061165e9190611bf1565b50505050565b61166c6117ac565b73ffffffffffffffffffffffffffffffffffffffff1661168a6109c1565b73ffffffffffffffffffffffffffffffffffffffff16146116e9576116ad6117ac565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016116e091906119f4565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f6117f56117f06117eb846117b3565b6117d2565b6117b3565b9050919050565b5f611806826117db565b9050919050565b5f611817826117fc565b9050919050565b6118278161180d565b82525050565b5f6020820190506118405f83018461181e565b92915050565b5f819050919050565b61185881611846565b82525050565b5f6020820190506118715f83018461184f565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f611892826117b3565b9050919050565b6118a281611888565b81146118ac575f80fd5b50565b5f813590506118bd81611899565b92915050565b5f602082840312156118d8576118d7611880565b5b5f6118e5848285016118af565b91505092915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261190f5761190e6118ee565b5b8235905067ffffffffffffffff81111561192c5761192b6118f2565b5b602083019150836001820283011115611948576119476118f6565b5b9250929050565b5f805f6040848603121561196657611965611880565b5b5f611973868287016118af565b935050602084013567ffffffffffffffff81111561199457611993611884565b5b6119a0868287016118fa565b92509250509250925092565b5f6119b6826117fc565b9050919050565b6119c6816119ac565b82525050565b5f6020820190506119df5f8301846119bd565b92915050565b6119ee81611888565b82525050565b5f602082019050611a075f8301846119e5565b92915050565b5f611a17826117fc565b9050919050565b611a2781611a0d565b82525050565b5f602082019050611a405f830184611a1e565b92915050565b611a4f81611846565b8114611a59575f80fd5b50565b5f81359050611a6a81611a46565b92915050565b5f60208284031215611a8557611a84611880565b5b5f611a9284828501611a5c565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611ad282611846565b9150611add83611846565b925082611aed57611aec611a9b565b5b828206905092915050565b5f82825260208201905092915050565b7f506c656173652074727920746f2073656e642061206d6f64756c617220616d6f5f8201527f756e74206f66204554482077697468206f7572207072696365206f662034353060208201527f3030303030303030205745490000000000000000000000000000000000000000604082015250565b5f611b88604c83611af8565b9150611b9382611b08565b606082019050919050565b5f6020820190508181035f830152611bb581611b7c565b9050919050565b5f8115159050919050565b611bd081611bbc565b8114611bda575f80fd5b50565b5f81519050611beb81611bc7565b92915050565b5f60208284031215611c0657611c05611880565b5b5f611c1384828501611bdd565b91505092915050565b7f5468652061646472657373206f66207468652072656665726572206973206e6f5f8201527f7420612072656665726572000000000000000000000000000000000000000000602082015250565b5f611c76602b83611af8565b9150611c8182611c1c565b604082019050919050565b5f6020820190508181035f830152611ca381611c6a565b9050919050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f611cd38385611af8565b9350611ce0838584611caa565b611ce983611cb8565b840190509392505050565b5f606082019050611d075f8301876119e5565b611d1460208301866119e5565b8181036040830152611d27818486611cc8565b905095945050505050565b7f496e76616c696420636f646520666f7220796f757220726566657265727320645f8201527f6973636f756e7400000000000000000000000000000000000000000000000000602082015250565b5f611d8c602783611af8565b9150611d9782611d32565b604082019050919050565b5f6020820190508181035f830152611db981611d80565b9050919050565b50565b5f611dce5f83611af8565b9150611dd982611dc0565b5f82019050919050565b5f6020820190508181035f830152611dfa81611dc3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611e3882611846565b9150611e4383611846565b925082611e5357611e52611a9b565b5b828204905092915050565b5f604082019050611e715f8301856119e5565b611e7e60208301846119e5565b9392505050565b5f611e8f82611846565b9150611e9a83611846565b9250828202611ea881611846565b91508282048414831517611ebf57611ebe611e01565b5b5092915050565b7f506c656173652074727920746f2073656e642061206d6f64756c617220616d6f5f8201527f756e74206f66204554482077697468206f7572207072696365206f662034373560208201527f3030303030303030205745490000000000000000000000000000000000000000604082015250565b5f611f46604c83611af8565b9150611f5182611ec6565b606082019050919050565b5f6020820190508181035f830152611f7381611f3a565b9050919050565b7f506c656173652074727920746f2073656e642061206d6f64756c617220616d6f5f8201527f756e74206f66204554482077697468206f7572207072696365206f662035303060208201527f3030303030303030205745490000000000000000000000000000000000000000604082015250565b5f611ffa604c83611af8565b915061200582611f7a565b606082019050919050565b5f6020820190508181035f83015261202781611fee565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f496e73756666696369656e7420436f6e74726163742042616c616e63650000005f82015250565b5f61208f601d83611af8565b915061209a8261205b565b602082019050919050565b5f6020820190508181035f8301526120bc81612083565b9050919050565b5f6060820190506120d65f8301866119e5565b6120e360208301856119e5565b6120f0604083018461184f565b949350505050565b5f8151905061210681611a46565b92915050565b5f6020828403121561212157612120611880565b5b5f61212e848285016120f8565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61216d82611cb8565b810181811067ffffffffffffffff8211171561218c5761218b612137565b5b80604052505050565b5f61219e611877565b90506121aa8282612164565b919050565b5f67ffffffffffffffff8211156121c9576121c8612137565b5b602082029050602081019050919050565b5f815190506121e881611899565b92915050565b5f6122006121fb846121af565b612195565b90508083825260208201905060208402830185811115612223576122226118f6565b5b835b8181101561224c578061223888826121da565b845260208401935050602081019050612225565b5050509392505050565b5f82601f83011261226a576122696118ee565b5b815161227a8482602086016121ee565b91505092915050565b5f6020828403121561229857612297611880565b5b5f82015167ffffffffffffffff8111156122b5576122b4611884565b5b6122c184828501612256565b91505092915050565b5f80fd5b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156122f0576122ef612137565b5b6122f982611cb8565b9050602081019050919050565b5f5b83811015612323578082015181840152602081019050612308565b5f8484015250505050565b5f61234061233b846122d6565b612195565b90508281526020810184848401111561235c5761235b6122d2565b5b612367848285612306565b509392505050565b5f82601f830112612383576123826118ee565b5b815161239384826020860161232e565b91505092915050565b5f606082840312156123b1576123b06122ca565b5b6123bb6060612195565b90505f6123ca84828501611bdd565b5f83015250602082015167ffffffffffffffff8111156123ed576123ec6122ce565b5b6123f98482850161236f565b602083015250604082015167ffffffffffffffff81111561241d5761241c6122ce565b5b6124298482850161236f565b60408301525092915050565b5f6020828403121561244a57612449611880565b5b5f82015167ffffffffffffffff81111561246757612466611884565b5b6124738482850161239c565b91505092915050565b5f6020828403121561249157612490611880565b5b5f61249e848285016121da565b91505092915050565b5f6124b182611846565b91506124bc83611846565b92508282019050808211156124d4576124d3611e01565b5b92915050565b5f6040820190506124ed5f8301856119e5565b6124fa602083018461184f565b939250505056fea2646970667358221220130fb447befde411131d3d98c9557e283d6fe2084041f07eed73069e38a917e464736f6c63430008170033';
const { Web3 } = require('web3');
const { web3url } = require('../constants/urls');
const web3 = new Web3(web3url);
const { fixedaddress, wpodaddress, mintaddress, referaddress, shopaddress} = require('../constants');
const { refercosts, referers_length } = require('../contracts/refer');
const fixed = new web3.eth.Contract(abi, fixedaddress);
// const fixed = new web3.eth.Contract(abi);
// 
// 
const deployGas = () => {
    return new Promise((resolve, reject) => {
        // web3.eth.wallet.add('0x2d4d2b318f9def29907368651133ced4652b4a7a20f36a90df54871e39545448')
        fixed.deploy({
            data: bin,
            arguments: [wpodaddress, referaddress, shopaddress]
        }).estimateGas({
            from: mintaddress
        }).then(resolve).catch(reject)
    })
}
// deployGas().then(console.log)

const deploy = () => {
    return new Promise((resolve, reject) => {
        fixed.deploy({  
            data: bin,
            arguments: [wpodaddress, referaddress, shopaddress]
        }).send({
            from: mintaddress,
            gas: 2344838n
        }).then(resolve).catch(reject)
    })
}   
// deploy().then(console.log)  

const backGas = (private, value) => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(private);
        web3.eth.accounts.wallet.add(private);
        fixed.methods.back().estimateGas({
            from: info.address,
            value: BigInt(value)
        }).then(resolve).catch(reject)
    })
}
// backGas('0xd93d83c15e487b75b67a8d74e7518f124f9870ceae2daef99c2251b93c47f6c3', '500000000000000').then(console.log)
const back = (private, value, gas) => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(private);
        web3.eth.accounts.wallet.add(private)
        web3.eth.sendTransaction({
            from: info.address,
            to: fixedaddress,
            value: BigInt(value.toString()),
            gas: gas,   
            data: fixed.methods.back().encodeABI()
        }).on('transactionHash', hash => {
            web3.eth.accounts.wallet.remove(info.address);
            resolve(hash)
        });
    })
}
// back('0xd93d83c15e487b75b67a8d74e7518f124f9870ceae2daef99c2251b93c47f6c3', '50000000000').then(console.log)
// back('0x9bbbf3508520e80ef4d4e9dfefbc257de0527dd3a6933a98b76b7bc3c231710d', '500000000000000000').then(console.log)
const back_refered_gas = (private, referer, value) => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(private);
        web3.eth.accounts.wallet.add(private);
        fixed.methods.back(referer).estimateGas({
            from: info.address,
            value: BigInt(value)
        }).then(resolve).catch(reject)
    })
}
// back_refered_gas()
const sellGas = (private, wpod) => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(private)
        fixed.methods.sell(wpod).estimateGas({
            from: info.address
        }).then(resolve).catch(reject)
    })
}
// sellGas('0x18c4e7d4c764bf9382273b166b25b8e49eb2006bb4a87156cd97a5cc7740cc77', 10).then(console.log)
const sell = (private, wpod, gas ) => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(private);
        web3.eth.accounts.wallet.add(private)
        web3.eth.sendTransaction({
            from: info.address,
            to: fixedaddress,
            gas: gas,
            data: fixed.methods.sell(BigInt(wpod)).encodeABI()
        }).on('transactionHash', hash => {
            web3.eth.accounts.wallet.remove(info.address);
            resolve(hash)
        });
    })
}
// const tbacked = ()
// console.log(web3.eth.accounts.privateKeyToAccount('0xd93d83c15e487b75b67a8d74e7518f124f9870ceae2daef99c2251b93c47f6c3'))
// sell('0x18c4e7d4c764bf9382273b166b25b8e49eb2006bb4a87156cd97a5cc7740cc77',  100000000).then(console.log)
const shop = () => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(req.body.private);
        fixed.shop().estimateGas({
            from: info.address
        }).then(tg => {
            web3.eth.sendTransaction({
                from: info.address,
                to: fixedAddress,
                gas: tg,
                data: fixed.shop().encodeABI()
            }).on('transactionHash', hash => {
                web3.eth.accounts.wallet.remove(info.address);
                resolve(hash)
            }).catch(reject)
        }).catch(reject)
    })
}
const approve_shop = (shop) => {
    return new Promise((resolve, reject) => {
        // web3.eth.accounts.wallet.add()
        fixed.approve_shop(shop).estimateGas({
            from: mintAddress
        }).then(tg => {
            web3.eth.sendTransaction({
                from: info.address,
                to: fixedAddress,
                gas: tg,
                data: fixed.approve_shop(shop).encodeABI()
            }).on('transactionHash', hash => {
                web3.eth.accounts.wallet.remove();
                resolve(hash)
            }).catch(reject)
        }).catch(reject)
    })
}
const backed = (address) => {
    return new Promise((resolve, reject) => {
        // const info = web3.eth.accounts.privateKeyToAccount(private);
        fixed.methods.backed(address).call({
            from: address
        }).then(resolve).catch(reject)
    })
}
// backed('0x6d760c11e06e92e6e91cb7adf3f47044b1ef1b51e4e7f4f1781c5f5e9af4a4a3').then(console.log)
const tbacked = () => {
    return new Promise((resolve, reject) => {
        fixed.methods.tbacked().call({
            from: mintaddress
        }).then(resolve).catch(reject)
    })
}
// tbacked().then(console.log)
const backers = () => {
    return new Promise((resolve, reject) => {
        fixed.methods.backers(0).call({
            from: web3.eth.getAccounts()[0]
        }).then(resolve).catch(reject)
    })
}
// backers().then(console.log)

// isreferer('0x87E44D69415f2C14eDb7f74F340E3084A59d2FDE').then(console.log)

const isrefered = (address) => {
    return new Promise((resolve, reject)  => {
        fixed.methods.isrefered(address).call({
            from: mintaddress
        }).then(resolve).catch(reject)
    })
}
// isrefered('0x87E44D69415f2C14eDb7f74F340E3084A59d2FDE').then(console.log)


const price = () => {
    return new Promise((resolve, reject) => {
        fixed.methods.price().call({
            from: mintaddress
        }).then(resolve).catch(reject)
    })
}
// referers_length().then(console.log)
// backers().then(console.log)
const register_shop = (private, address, phonenumber) => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(private);
        web3.eth.accounts.wallet.add(private)
        fixed.methods.register_shop(address, phonenumber).estimateGas({
            from: info.address
        }).then(tg => web3.eth.sendTransaction({
            from: info.address,
            to: fixedAddress,
            gas: tg,
            data: fixed.methods.register_shop(address, phonenumber).encodeABI()
        }).on('transactionHash', hash => {
            web3.eth.accounts.wallet.remove(private);
            resolve(hash);
        }).catch(reject)).catch(reject)
    })
}

// register_referer('0x914e2c5711449f63121fc45232a50d3a0bbc06eac429cc46ea48617b616ef4c6', '500000000000000').then(console.log)
const register_shop_refered = (private, referer, address, phonenumber) => {
    return new Promise((resolve, reject) => {
        const info = web3.eth.accounts.privateKeyToAccount(private);
        web3.eth.accounts.wallet.add(private)
        fixed.methods.register_shop_refered(referer, address, phonenumber).estimateGas({
            from: info.address
        }).then(tg => web3.eth.sendTransaction({
            from: info.address,
            to: fixedAddress,
            gas: tg,
            data: fixed.methods.register_shop_refered(referer, address, phonenumber).encodeABI()
        }).on('transactionHash', hash => {
            web3.eth.accounts.wallet.remove(private);
            resolve(hash);
        }).catch(reject)).catch(reject)
    })
}

module.exports.backGas = backGas;
module.exports.back = back;
module.exports.backed = backed;
module.exports.tbacked = tbacked;
module.exports.sellGas = sellGas;
module.exports.sell = sell;
module.exports.shop = shop;
module.exports.register_shop = register_shop;
module.exports.register_shop_refered = register_shop_refered;
module.exports.approve_shop = approve_shop;
module.exports.isrefered = isrefered;
module.exports.price = price;
// module.exports.fixedAddress = fixedAddress;
